:ruby
  query = params[:query]
  params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
  params.delete(:query) if params[:query].blank?
  params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
  sort_reverse = params[:sort_reverse]
  sort = params[:sort]
  params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s
  export_action = RailsAdmin::Config::Actions.find(:export, { controller: self.controller, abstract_model: @abstract_model })
  export_action = nil unless export_action && authorized?(export_action.authorization_key, @abstract_model)
  description = RailsAdmin.config(@abstract_model.model_name).description
  properties = @model_config.list.with(controller: self.controller, view: self, object: @abstract_model.model.new).visible_fields

:javascript
  $(document).ready(function() {
    $(".clickable-cell").click(function(){
      window.document.location = $(this).data("href");
    });

    // part of the original
    #{ordered_filter_string}
  });

  function toggle_column(col){
    $(col + '_toggle').toggle();
    if($(col + '_label').hasClass('label-success')){
      $(col + '_label').removeClass('label-success')
      $(col + '_label').addClass('label-default')
    }else{
      $(col + '_label').addClass('label-success')
      $(col + '_label').removeClass('label-default')
    }
  }

- content_for :contextual_tabs do
  = bulk_menu
  - if filterable_fields.present?
    %li.dropdown{style: 'float:right'}
      %a.dropdown-toggle{href: '#', :'data-toggle' => "dropdown"}
        = t('admin.misc.add_filter')
        %b.caret
      %ul.dropdown-menu#filters{style: 'left:auto; right:0;'}
        - filterable_fields.each do |field|
          - field_options = case field.type
          - when :enum
            - options_for_select(field.with(object: @abstract_model.model.new).enum)
          - else
            - ''
          %li
            %a{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => "", :"data-field-datetimepicker-format" => (field.try(:parser) && field.parser.to_momentjs)}= capitalize_first_letter(field.label)
%style
  - properties.select{ |p| p.column_width.present? }.each do |property|
    = "#list th.#{property.css_class} { width: #{property.column_width}px; min-width: #{property.column_width}px; }"
    = "#list td.#{property.css_class} { max-width: #{property.column_width}px; }"
#list
  = form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
    .well
      .row
        .col-xs-6
          %span#filters_box
          %hr.filters_box{style: "display:#{ordered_filters.empty? ? 'none' : 'block'}"}
          .input-group
            %input.form-control.input-small{name: "query", type: "search", value: query, placeholder: t("admin.misc.filter")}
            %span.input-group-btn
              %button.btn.btn-primary{type: 'submit', :'data-disable-with' => '<i class="icon-white icon-refresh"></i> '.html_safe + t('admin.misc.refresh')}
                %i.icon-white.icon-refresh
                = t('admin.misc.refresh')
              %button#remove_filter.btn.btn-info{title: "Reset filters"}
                %i.icon-white.icon-remove
        .col-xs-6
          .btn-group{style: 'float: right;'}
            - if export_action
              = link_to wording_for(:link, export_action), export_path(params.except('set').except('page')), class: 'btn btn-info'

  - unless @model_config.list.scopes.empty?
    %ul.nav.nav-tabs#scope_selector
      - @model_config.list.scopes.each_with_index do |scope, index|
        - scope = '_all' if scope.nil?
        %li{class: "#{'active' if scope.to_s == params[:scope] || (params[:scope].blank? && index == 0)}"}
          %a{href: index_path(params.merge(scope: scope, page: nil)), class: 'pjax'}= I18n.t("admin.scopes.#{@abstract_model.to_param}.#{scope}", default: I18n.t("admin.scopes.#{scope}", default: scope.to_s.titleize))
  - if @objects.any?
    .well.well-sm
      - properties.each do |property|
        .label.label-success{class: property.name.to_s + '_label', onclick: "toggle_column('.#{property.name.to_s}')".html_safe, style: 'cursor: pointer;'}= property.label
    = form_tag bulk_action_path(model_name: @abstract_model.to_param), method: :post, id: "bulk_form", class: "form" do
      = hidden_field_tag :bulk_action
      - if description.present?
        %p
          %strong= description
      .table-responsive
        %table.table.table-condensed.table-striped.table-hover.table-bordered
          %thead
            %tr
              %th.shrink
                %input.toggle{type: "checkbox"}
              - properties.each do |property|
                - selected = (sort == property.name.to_s)
                - if property.sortable
                  - sort_location = index_path params.except('sort_reverse').except('page').merge(sort: property.name).merge(selected && sort_reverse != "true" ? {sort_reverse: "true"} : {})
                  - sort_direction = (sort_reverse == 'true' ? "headerSortUp" : "headerSortDown" if selected)
                %th{class: "#{property.sortable && "header pjax" || nil} #{sort_direction if property.sortable && sort_direction} #{property.css_class} #{property.type_css_class} text-center #{property.name.to_s}_toggle", :'data-href' => (property.sortable && sort_location), rel: "tooltip", title: "#{property.hint}"}= capitalize_first_letter(property.label)
              %th.last.shrink.text-center Actions
          %tbody
            - @objects.each do |object|
              %tr{class: "#{@abstract_model.param_key}_row" }
                %td
                  = check_box_tag "bulk_ids[]", object.id, false
                - properties.map{ |property| property.bind(:object, object) }.each do |property|
                  - value = property.pretty_value
                  %td{class: "#{property.css_class} #{property.type_css_class} #{property.name.to_s}_toggle clickable-cell", title: strip_tags(value.to_s), data: { href: "#{rails_admin.url_for(action: :show, controller: 'rails_admin/main', model_name: @abstract_model.try(:to_param), id: (object.try(:persisted?) && object.try(:id) || nil))}"} }= value.present? ? value : '-'
                %td.last.links
                  %ul.inline.list-inline= menu_for :member, @abstract_model, object, true
      - if @objects.respond_to?(:total_count)
        - total_count = @objects.total_count.to_i
        .row
          .col-sm-8= paginate(@objects, remote: true)
          .col-sm-4.text-right.pagination= page_entries_info @objects, entry_name: @model_label_plural
          / .col-md-4.text-right= link_to(t("admin.misc.show_all"), index_path(params.merge(all: true)), class: "show-all btn btn-default clearfix pjax") if total_count > 20 || total_count <= @objects.to_a.size
      - else
        .clearfix.total-count= "Displaying all <strong>#{@objects.size}</strong> #{@model_config.pluralize(@objects.size).downcase}".html_safe
  - else
    .pagination= page_entries_info @objects, entry_name: @model_label_plural
